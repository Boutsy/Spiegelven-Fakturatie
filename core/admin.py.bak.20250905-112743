from django.contrib import admin

from .models import (
    Member, MemberAsset,
    YearPricing, YearRule, YearSequence, YearInvestScale)

# Acties staan in aparte module (enkel hier importeren -> geen dubbelingen)
from .admin_actions import export_assets_csv, print_assets_html


class MemberAssetInline(admin.TabularInline):
    model = MemberAsset
    extra = 0
    fields = ('asset_type','identifier','active','released_on')
    show_change_link = True


@admin.register(Member)
class MemberAdmin(admin.ModelAdmin):

    def get_fieldsets(self, request, obj=None):
        M = self.model

        def have(*cands):
            # geef de eerste bestaande veldnaam terug
            from django.core.exceptions import FieldDoesNotExist
            for n in cands:
                try:
                    M._meta.get_field(n)
                    return n
                except FieldDoesNotExist:
                    continue
            return None

        def pick(names):
            out = []
            for item in names:
                if isinstance(item, (tuple, list)):
                    cand = have(*item)
                else:
                    cand = have(item)
                if cand:
                    out.append(cand)
            return out

        # ---- Gewenste volgorde/groepen ----
        # 1) Naam, Voornaam, Straat, Postcode, Gemeente, Land
        groep_algemeen = []
        groep_algemeen += pick(["last_name"])
        groep_algemeen += pick(["first_name"])
        groep_algemeen += pick([("street","address","address_line1")])
        groep_algemeen += pick([("postal_code","postcode","zip_code")])
        groep_algemeen += pick([("city","municipality","town")])
        groep_algemeen += pick(["country"])

        # 2) email, GSM, Tel. Privé, Tel. Werk (samen op één rij)
        email = pick(["email"])
        phones = pick(["phone_mobile","phone_private","phone_work"])
        contact_rows = []
        row = tuple(email + phones)
        if row:
            contact_rows.append(row)

        # 3) Geboortedatum, Household, household role
        groep_inschrijving = []
        groep_inschrijving += pick([("birth_date","date_of_birth","dob")])
        groep_inschrijving += pick(["household"])
        groep_inschrijving += pick(["household_role"])

        # 4) Federation via club
        groep_federation = pick([("federation_via_club","federation_through_club")])

        # 5) Course, Billing account, Household head, Membership mode,
        #    Invest flex start year, Invest flex locked amount
        groep_admin = []
        groep_admin += pick(["course"])
        groep_admin += pick([("billing_account","invoice_account")])
        groep_admin += pick([("household_head","head_of_household")])
        groep_admin += pick(["membership_mode"])
        groep_admin += pick([("invest_flex_start_year","investment_flex_start_year")])
        groep_admin += pick([("invest_flex_locked_amount","investment_flex_locked_amount")])

        # 6) Active
        groep_status = pick(["active","is_active"])

        # Verzamel geselecteerde velden, en bereken overige editables
        chosen = set(groep_algemeen + list(row if row else []) + groep_inschrijving + groep_federation + groep_admin + groep_status)

        from django.db.models import ForeignObjectRel
        editables = []
        for f in M._meta.get_fields():
            if getattr(f, "editable", False) and not isinstance(f, ForeignObjectRel) and not getattr(f, "auto_created", False):
                if f.name not in chosen:
                    editables.append(f.name)

        fieldsets = []

        if groep_algemeen:
            fieldsets.append(("Algemeen", {"fields": tuple(groep_algemeen)}))

        if row:
            fieldsets.append(("Contact", {"fields": tuple(contact_rows), "classes": ("wide")}))

        if groep_inschrijving:
            fieldsets.append(("Inschrijving", {"fields": tuple(groep_inschrijving)}))

        if groep_federation:
            fieldsets.append(("Federation", {"fields": tuple(groep_federation)}))

        if groep_admin:
            fieldsets.append(("Administratie", {"fields": tuple(groep_admin)}))

        if groep_status:
            fieldsets.append(("Status", {"fields": tuple(groep_status)}))

        if editables:
            fieldsets.append(("Overige", {"fields": tuple(editables)}))

        return tuple(fieldsets)



@admin.register(MemberAsset)
ASSET_LABELS = {
    'VST_KAST': 'Kast',
    'KAR_KLN': 'Kar-kast',
    'KAR_ELEC': 'E-kar-kast',
}

class AssetTypeFilter(admin.SimpleListFilter):
    title = 'Type'
    parameter_name = 'asset_type'
    def lookups(self, request, model_admin):
        return [(k, v) for k, v in ASSET_LABELS.items()]
    def queryset(self, request, queryset):
        v = self.value()
        return queryset.filter(asset_type=v) if v else queryset


class MemberAssetAdmin(admin.ModelAdmin):
    list_display = ('member', 'asset_type_label', 'identifier', 'active')
    list_filter = (AssetTypeFilter, 'active')
    search_fields = ('member__last_name', 'member__first_name', 'identifier')

    def asset_type_label(self, obj):
        return ASSET_LABELS.get(obj.asset_type, obj.asset_type)
    asset_type_label.short_description = 'Type'

class MemberAdmin(admin.ModelAdmin):
    # UX
    save_on_top = True
    ordering = ("last_name","first_name")
    list_per_page = 50
    empty_value_display = "—"

    # Kolommen in de lijst
    list_display = (
        "external_id",
        "last_name","first_name",
        "email","phones",
        "city","postal_code",
        "course","membership_mode",
        "active","age",
    )
    list_display_links = ("last_name","first_name")

    # Zoeken (toont zoekveld bovenaan in de admin)
    search_fields = (
        "external_id",
        "last_name","first_name",
        "email",
        "street","postal_code","city",
        "phone_mobile","phone_private","phone_work",
    )
    search_help_text = "Zoek op extern nummer, naam, e-mail, adres of telefoon."

    # Filters rechts
    list_filter = ("active","course","membership_mode","city")

    # Foreign keys sneller laden in list view
    list_select_related = ("household_head",)

    @admin.display(description="Telefoon")
    def phones(self, obj):
        return " / ".join([p for p in [obj.phone_mobile, obj.phone_private, obj.phone_work] if p])

    @admin.display(description="Leeftijd", ordering="date_of_birth")
    def age(self, obj):
        from datetime import date
        dob = getattr(obj, "date_of_birth", None) or getattr(obj, "birth_date", None)
        if not dob:
            return ""
        today = date.today()
        return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))



# === Member list UI v2 (smalle lijst + zoeken op naam/leeftijd/course) ===
from django.contrib import admin
from django.db.models import Q
from datetime import date, timedelta
from .models import Member

try:
    admin.site.unregister(Member)
except Exception:
    pass

@admin.register(Member)
class MemberAdmin(admin.ModelAdmin):
    save_on_top = True
    ordering = ("last_name","first_name")
    list_per_page = 50
    empty_value_display = "—"

    # Alleen gevraagde kolommen en volgorde
    list_display = (
        "last_name",           # Last Name
        "first_name",          # First Name
        "gsm_number",          # GSM nummer
        "age",                 # Leeftijd
        "course_short",        # Course (CC / P3)
        "active",              # Active (vinkje)
        "email",               # Email
    )
    list_display_links = ("last_name","first_name")

    # Zoek enkel op Last Name, First Name, Course (+ custom leeftijd)
    search_fields = ("last_name","first_name","course")

    @admin.display(description="GSM nummer")
    def gsm_number(self, obj):
        return getattr(obj, "phone_mobile", "") or ""

    @admin.display(description="Leeftijd", ordering="date_of_birth")
    def age(self, obj):
        dob = getattr(obj, "date_of_birth", None) or getattr(obj, "birth_date", None)
        if not dob:
            return ""
        t = date.today()
        return t.year - dob.year - ((t.month, t.day) < (dob.month, dob.day))

    @admin.display(description="Course")
    def course_short(self, obj):
        val = (getattr(obj, "course", "") or "").strip().upper()
        if val in {"CHAMPIONSHIP COURSE","CHAMPIONSHIP","COURSE_CC"}:
            return "CC"
        if val in {"PAR-3","PAR3","PAR_3","COURSE_P3"}:
            return "P3"
        return val  # verwacht al "CC" of "P3"

    def get_search_results(self, request, queryset, search_term):
        # Start met standaard zoeken op last/first/course
        qs, use_distinct = super().get_search_results(request, queryset, search_term)
        term = (search_term or "").strip()

        # Extra: numerieke leeftijd
        if term.isdigit():
            age = int(term)
            today = date.today()
            upper = date(today.year - age, today.month, today.day)
            lower = date(today.year - age - 1, today.month, today.day) + timedelta(days=1)
            dob_filter = Q()
            # Ondersteun beide veldnamen
            if any(f.name == "date_of_birth" for f in Member._meta.get_fields()):
                dob_filter |= Q(date_of_birth__gte=lower, date_of_birth__lte=upper)
            if any(f.name == "birth_date" for f in Member._meta.get_fields()):
                dob_filter |= Q(birth_date__gte=lower, birth_date__lte=upper)
            qs = qs.filter(dob_filter)

        # Extra: course-synoniemen
        c = term.lower()
        if c in {"championship","championship course","cc"}:
            qs = qs.filter(course__iexact="CC")
        elif c in {"par-3","par3","p3"}:
            qs = qs.filter(course__iexact="P3")

        return qs, use_distinct


# --- BEGIN: MemberAsset admin patch (type met NL-label) ---
from django.contrib import admin
from .models import MemberAsset

_ASSET_LABELS_NL = {
    'VST_KAST': 'Kast',
    'KAR_KLN': 'Kar-kast',
    'KAR_ELEC': 'E-kar-kast',
}

def asset_type_nl(obj):
    return _ASSET_LABELS_NL.get(getattr(obj, 'asset_type', None), getattr(obj, 'asset_type', ''))
asset_type_nl.short_description = 'Type'
asset_type_nl.admin_order_field = 'asset_type'


class MemberAssetAdmin(admin.ModelAdmin):
    list_display = ('member', 'asset_type_label', 'identifier', 'active')
    list_filter = (AssetTypeFilter, 'active')
    search_fields = ('member__last_name', 'member__first_name', 'identifier')

    def asset_type_label(self, obj):
        return ASSET_LABELS.get(obj.asset_type, obj.asset_type)
    asset_type_label.short_description = 'Type'
