\nfrom datetime import date\nfrom decimal import Decimal\nfrom django.apps import apps\nfrom django.contrib.admin.views.decorators import staff_member_required\nfrom django.shortcuts import get_object_or_404, render\n\nMember       = apps.get_model("core","Member")\nMemberAsset  = apps.get_model("core","MemberAsset")\nYearPricing  = apps.get_model("core","YearPricing")\n\ndef _age_on(jan1_year: int, dob):\n    if not dob:\n        return None\n    ref = date(jan1_year, 1, 1)\n    years = ref.year - dob.year - ((ref.month, ref.day) < (dob.month, dob.day))\n    return max(0, years)\n\ndef _role_tag(member):\n    v = (getattr(member, "household_role", None) or "").strip().lower()\n    return "PRT" if v in {"prt","partner","partner_role","husband","wife"} else "IND"\n\ndef _membership_codes(member, year):\n    """Kies lidgeld + federatiecodes o.b.v. course + leeftijd + (optioneel) partner."""\n    course = (getattr(member,"course",None) or "").strip().upper()  # 'CC' of 'P3'\n    age = _age_on(year, getattr(member,"date_of_birth", None))\n    role = _role_tag(member)  # 'IND' of 'PRT'\n\n    lid = None\n    fed = None\n\n    if course == "CC":\n        if age is None:\n            # zonder leeftijd: val terug op IND/PRT\n            lid = f"LID_CC_{role}"\n            fed = f"FED_CC_{'KID' if role=='KID' else role}" if role in {'IND','PRT'} else "FED_CC_IND"\n        elif age <= 15:\n            lid = "LID_CC_KID_0_15"; fed = "FED_CC_KID"\n        elif 16 <= age <= 21:\n            lid = "LID_CC_KID_16_21"; fed = "FED_CC_KID"\n        elif 22 <= age <= 26:\n            lid = "LID_CC_YA_22_26";  fed = f"FED_CC_{role}"\n        elif 27 <= age <= 29:\n            lid = "LID_CC_YA_27_29";  fed = f"FED_CC_{role}"\n        elif 30 <= age <= 35:\n            lid = "LID_CC_YA_30_35";  fed = f"FED_CC_{role}"\n        else:\n            lid = f"LID_CC_{role}";   fed = f"FED_CC_{role}"\n    elif course == "P3":\n        if age is None:\n            lid = f"P3_{role if role in {'IND','PRT'} else 'IND'}"\n        elif age <= 21:\n            lid = "P3_KID"\n        else:\n            lid = f"P3_{role if role in {'IND','PRT'} else 'IND'}"\n        fed = None  # doorgaans geen federatie voor P3; indien toch: vul YearPricing met P3_FED_* en map hier\n    else:\n        # Onbekend course: geen lidgeld\n        lid = None; fed = None\n\n    return [c for c in [lid, fed] if c]\n\ndef _investment_codes(member, year):\n    """Optioneel: extra investeringslijnen indien membership_mode dat vereist."""\n    codes = []\n    mm = (getattr(member,"membership_mode",None) or "").strip().lower()\n    role = _role_tag(member)\n    if mm == "investment":\n        codes.append(f"INV_{role}")\n        # Flexslot indien geactiveerd (startjaar en bedrag bestaan al in je datamodel)\n        start = getattr(member,"invest_flex_start_year", None)\n        if start and isinstance(start, int) and year >= start:\n            codes.append(f"INV_FLEX_{role}")\n    return codes\n\ndef _asset_codes(member):\n    """Actieve assets vertalen 1-op-1 naar pricing code."""\n    qsa = (MemberAsset.objects\n           .filter(member=member, active=True)\n           .values_list("asset_type", flat=True))\n    return list(qsa)\n\n@staff_member_required\ndef invoice_preview(request, member_id: int, year: int):\n    member = get_object_or_404(Member, pk=member_id)\n\n    # Alle codes die we willen prijzen verzamelen\n    wanted = []\n    wanted += _membership_codes(member, year)\n    wanted += _investment_codes(member, year)\n    wanted += _asset_codes(member)\n\n    # Prijzentabel van dit jaar in 1 query\n    yp_map = { (yp.year, yp.code): yp.amount for yp in YearPricing.objects.filter(year=year) }\n\n    lines = []\n    notes = []\n    total = Decimal("0.00")\n\n    # Beschrijvingen voor nette weergave\n    DESCS = {\n        "LID_CC_IND":"Lidgeld CC (individueel)",\n        "LID_CC_PRT":"Lidgeld CC (partner)",\n        "LID_CC_KID_0_15":"Lidgeld CC (kind 0–15)",\n        "LID_CC_KID_16_21":"Lidgeld CC (kind 16–21)",\n        "LID_CC_YA_22_26":"Lidgeld CC (jongvolw. 22–26)",\n        "LID_CC_YA_27_29":"Lidgeld CC (jongvolw. 27–29)",\n        "LID_CC_YA_30_35":"Lidgeld CC (jongvolw. 30–35)",\n        "FED_CC_IND":"Federatie CC (individueel)",\n        "FED_CC_PRT":"Federatie CC (partner)",\n        "FED_CC_KID":"Federatie CC (kind)",\n        "P3_IND":"Lidgeld P3 (individueel)",\n        "P3_PRT":"Lidgeld P3 (partner)",\n        "P3_KID":"Lidgeld P3 (kind)",\n        "INV_IND":"Investering (individueel)",\n        "INV_PRT":"Investering (partner)",\n        "INV_FLEX_IND":"Investering flex (individueel)",\n        "INV_FLEX_PRT":"Investering flex (partner)",\n        "VST_KAST":"Kast",\n        "KAR_KLN":"Kar-kast",\n        "KAR_ELEC":"E-kar-kast",\n    }\n\n    # Lijnen opbouwen\n    for code in wanted:\n        unit = yp_map.get((year, code))\n        if unit is None:\n            notes.append(f"Geen prijs voor code {code} ({year}).")\n            unit = Decimal("0.00")\n        qty = Decimal("1")\n        line_total = (unit or Decimal("0.00")) * qty\n        total += line_total\n        lines.append({\n            "code": code,\n            "desc": DESCS.get(code, code),\n            "qty":  qty,\n            "unit": unit,\n            "total": line_total,\n        })\n\n    ctx = {"member": member, "year": year, "lines": lines, "total": total, "notes": notes}\n    # --- auto: pro-rata correctie ---\n    try:\n        _lines = locals().get('lines') or (ctx.get('lines') if 'ctx' in locals() else None)\n        if _lines is not None:\n            _fix_preview_prorata(_lines, member)\n    except Exception as _e:\n        pass\n\n    return render(request, "admin/invoice_preview.html", ctx)\n\n\ndef invoice_preview_default_next_year(request, member_id):\n    year = timezone.now().year + 1\n    return invoice_preview(request, member_id, year)\nfrom django.utils import timezone\n\ndef invoice_preview_default(request, member_id):\n    year = timezone.now().year + 1\n    return invoice_preview(request, member_id, year)\n\n\n# --- AUTO-ADDED: pro-rata correctie voor preview ---\nfrom decimal import Decimal\n\ndef _fix_preview_prorata(lines, member):\n    """\n    Past investerings- en flexregels aan naar pro-rata bedragen voor de preview.\n    Werkt voor dictlijnen met "amount" of "unit_price_excl"+"quantity".\n    """\n    if not lines:\n        return\n\n    def _get_amount(d):\n        if "amount" in d and d["amount"] is not None:\n            return Decimal(str(d["amount"]))\n        if "unit_price_excl" in d and d["unit_price_excl"] is not None:\n            q = Decimal(str(d.get("quantity", "1"))) if d.get("quantity") is not None else Decimal("1")\n            return Decimal(str(d["unit_price_excl"])) * q\n        return None\n\n    def _set_amount(d, new_amount: Decimal):\n        if "amount" in d:\n            d["amount"] = new_amount\n        elif "unit_price_excl" in d:\n            q = Decimal(str(d.get("quantity","1"))) if d.get("quantity") is not None else Decimal("1")\n            if q == 0:\n                d["unit_price_excl"] = new_amount\n                d["quantity"] = Decimal("1")\n            else:\n                d["unit_price_excl"] = (new_amount / q).quantize(Decimal("0.01"))\n\n    for d in lines:\n        desc = (d.get("description") or "").lower()\n        code = (d.get("code") or "").upper()\n        amt = _get_amount(d)\n        if amt is None:\n            continue\n\n        # INVESTERING\n        if ("investering" in desc) or code.startswith("INV_IND") or code.startswith("INV_PRT") or "INV_NORM" in code:\n            new_amt = prorated_investment_amount(member, amt)\n            if new_amt > 0:\n                _set_amount(d, new_amt)\n                try:\n                    yt = int(getattr(member, "investment_years_total", 0) or 0)\n                    yr = int(getattr(member, "investment_years_remaining", 0) or 0)\n                    if yt > 0 and yr > 0:\n                        nth = yt - yr + 1\n                        d["description"] = f"{d.get('description') or 'Investering'} (jaar {nth}/{yt})"\n                except Exception:\n                    pass\n            else:\n                _set_amount(d, Decimal("0.00"))\n            continue\n\n        # FLEX\n        if ("flex" in desc) or code.startswith("INV_FLX"):\n            locked = getattr(member, "invest_flex_locked_amount", None)\n            if locked is not None:\n                new_amt = Decimal(str(locked)).quantize(Decimal("0.01"))\n            else:\n                new_amt = prorated_flex_amount(member, amt)\n\n            if new_amt > 0:\n                _set_amount(d, new_amt)\n                try:\n                    yt = int(getattr(member, "flex_years_total", 0) or 0)\n                    yr = int(getattr(member, "flex_years_remaining", 0) or 0)\n                    if yt > 0 and yr > 0:\n                        nth = yt - yr + 1\n                        d["description"] = f"{d.get('description') or 'Flex'} (jaar {nth}/{yt})"\n                except Exception:\n                    pass\n            else:\n                _set_amount(d, Decimal("0.00"))